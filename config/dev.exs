import Config

# Configure your database
config :probe, Probe.Repo,
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  database: "probe_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :probe, Probe.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "qKBKU6BJFLwlI1EAeKb0OZyWF22IXkK74Kc+o5Ddzj5E1C9K7q0kBo/jkNPSJ3mn",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:probe, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:probe, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :probe, Probe.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/probe/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :probe, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

config :geolix,
  databases: [
    %{
      id: :city,
      adapter: Geolix.Adapter.Fake,
      data: %{
        {127, 0, 0, 1} => %{
          city: %{
            name: "MÃ©rida"
          },
          continent: %{
            code: "NA",
            name: "North America"
          },
          country: %{
            iso_code: "MX",
            name: "Mexico"
          },
          location: %{
            latitude: 1.0,
            longitude: -1.0
          },
          registered_country: %{
            iso_code: "MX",
            name: "Mexico"
          },
          traits: %{
            ip_address: {127, 0, 0, 1}
          }
        }
      }
    },
    %{
      id: :asn,
      adapter: Geolix.Adapter.Fake,
      data: %{
        {127, 0, 0, 1} => %{
          autonomous_system_number: 17072,
          autonomous_system_organization: "TOTAL PLAY TELECOMUNICACIONES SA DE CV",
          ip_address: {127, 0, 0, 1}
        }
      }
    }
  ]

# Uncomment this if you have a local copy of the GeoIP database
# config :geolix,
#   databases: [
#     %{
#       id: :city,
#       adapter: Geolix.Adapter.MMDB2,
#       source: "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
#     },
#     %{
#       id: :country,
#       adapter: Geolix.Adapter.MMDB2,
#       source: "/usr/local/share/GeoIP/GeoLite2-Country.mmdb"
#     },
#     %{
#       id: :asn,
#       adapter: Geolix.Adapter.MMDB2,
#       source: "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
#     }
#   ]
